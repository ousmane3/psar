/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. GenerateurAnalyseur.jj */
/*@egen*/options
{
  static = false;
  LOOKAHEAD=2; 
}

PARSER_BEGIN(GenerateurAnalyseur)
package cAnalyseur;
public class GenerateurAnalyseur/*@bgen(jjtree)*/implements GenerateurAnalyseurTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTGenerateurAnalyseurState jjtree = new JJTGenerateurAnalyseurState();

/*@egen*/
 protected SimpleNode root;

 /*
 * effectue l analyse syntaxique de la chaine donn\u00e9e en param\u00e8tre
 *
 * @param la chaine repr\u00e9sentant la formule \u00e0 analyser
 *
 * @return deux elements:true ou false selon que le resultat de l analyse
 * et la chaine correspondante \u00e0 la formule en python.
 */

  protected Object[] check(String pourAnalyser)throws ParseException
  {
    GenerateurAnalyseur parser = new GenerateurAnalyseur(new java.io.StringReader(pourAnalyser));
 	Object[] obj ={false,""};
 	root = null;
    try
      {
       // premiere alternative d'analyse
         root = parser.alternative1();
        	obj[0] = true;        	
        	return obj;			
      }
      catch (Exception e)
      {

		try
		{
		  /*l alternative 1 n a pas abouti,la chaine etant consomm\u00e9e (peut etre amelior\u00e9!)*/ 
		  parser = new GenerateurAnalyseur(new java.io.StringReader(pourAnalyser));
		  root = parser.alternative2();		        	
          obj[0] = true;
          return obj;
		}
		catch(Exception f)
		{
		  		
        		obj[1] = e.getMessage()+"\t"+f.getMessage();
        		return obj;
		  
		}
		catch(Error f)
		{
		  		obj[0] = false;
        		obj[1] = f.getMessage();
        		return obj;
		}
    }
       catch (Error e)
      {
		  		obj[0] = false;
        		obj[1] = "Error";
        		return obj;       
      }

}
 }
PARSER_END(GenerateurAnalyseur)


SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

/*constantes*/
TOKEN :
{
  <CONSTANTE : ["a"-"t"] >
}
/*variables*/
TOKEN :
{
  <VARIABLE : ["w"-"z"] >
}

void constante():
{/*@bgen(jjtree) constante */
  SimpleNode jjtn000 = new SimpleNode(JJTCONSTANTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) constante */
  try {
/*@egen*/
  t = <CONSTANTE>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void variable():
{/*@bgen(jjtree) variable */
  SimpleNode jjtn000 = new SimpleNode(JJTVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) variable */
  try {
/*@egen*/
  t = <VARIABLE>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/*termes*/
void term()     :
{}
{
  
  constante()|variable()
}

SimpleNode alternative1():
{/*@bgen(jjtree) alternative1 */
  SimpleNode jjtn000 = new SimpleNode(JJTALTERNATIVE1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) alternative1 */
        try {
/*@egen*/
	formule() <EOF>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/	
}

SimpleNode alternative2():
{/*@bgen(jjtree) alternative2 */
  SimpleNode jjtn000 = new SimpleNode(JJTALTERNATIVE2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) alternative2 */
        try {
/*@egen*/
	formule_() <EOF>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	
}

/*pr\u00e9dicats de couleur*/
void est_rose()           :
{/*@bgen(jjtree) EST_ROSE */
  SimpleNode jjtn000 = new SimpleNode(JJTEST_ROSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EST_ROSE */
        try {
/*@egen*/
	"est_rose("term()")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void est_blanche()              :
{/*@bgen(jjtree) EST_BLANCHE */
  SimpleNode jjtn000 = new SimpleNode(JJTEST_BLANCHE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EST_BLANCHE */
        try {
/*@egen*/
	"est_blanc("term()")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void est_rouge()            :
{/*@bgen(jjtree) EST_ROUGE */
  SimpleNode jjtn000 = new SimpleNode(JJTEST_ROUGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EST_ROUGE */
        try {
/*@egen*/
	"est_rouge("term()")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
/*pr\u00e9dicats de comparaison de couleur binaire*/
void mm_col()             :
{/*@bgen(jjtree) MM_COL_QUE */
  SimpleNode jjtn000 = new SimpleNode(JJTMM_COL_QUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MM_COL_QUE */
  try {
/*@egen*/
  "meme_couleur_que("term()","term()")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
/*pr\u00e9dicats d'esp\u00e8ce*/
void paquerette()             :
{/*@bgen(jjtree) PAQUERETTE */
  SimpleNode jjtn000 = new SimpleNode(JJTPAQUERETTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PAQUERETTE */
  try {
/*@egen*/
  "Paquerette("term()")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void tulipe()         :
{/*@bgen(jjtree) TULIPE */
  SimpleNode jjtn000 = new SimpleNode(JJTTULIPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TULIPE */
  try {
/*@egen*/
  "Tulipe("term()")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void rose()       :
{/*@bgen(jjtree) ROSE */
  SimpleNode jjtn000 = new SimpleNode(JJTROSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ROSE */
  try {
/*@egen*/
  "Rose("term()")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/*pr\u00e9dicats de position unaire*/
void at_est()         :
{/*@bgen(jjtree) AT_EST */
  SimpleNode jjtn000 = new SimpleNode(JJTAT_EST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AT_EST */
  try {
/*@egen*/
  "a_l_est("term()")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void at_ouest()           :
{/*@bgen(jjtree) AT_OUEST */
  SimpleNode jjtn000 = new SimpleNode(JJTAT_OUEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AT_OUEST */
  try {
/*@egen*/
  "a_l_ouest("term()")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void at_nord()          :
{/*@bgen(jjtree) AT_NORD */
  SimpleNode jjtn000 = new SimpleNode(JJTAT_NORD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AT_NORD */
  try {
/*@egen*/
  "au_nord("term()")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void at_sud()         :
{/*@bgen(jjtree) AT_SUD */
  SimpleNode jjtn000 = new SimpleNode(JJTAT_SUD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AT_SUD */
  try {
/*@egen*/
  "au_sud("term()")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
/*pr\u00e9dicats de comparaison de  position binaire*/
void est_de()            :
{/*@bgen(jjtree) AT_EST_DE */
  SimpleNode jjtn000 = new SimpleNode(JJTAT_EST_DE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AT_EST_DE */
  try {
/*@egen*/
  "a_l_est_de("term()","term()")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void ouest_de()              :
{/*@bgen(jjtree) AT_OUEST_DE */
  SimpleNode jjtn000 = new SimpleNode(JJTAT_OUEST_DE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AT_OUEST_DE */
  try {
/*@egen*/
  "a_l_ouest_de("term()","term()")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void nord_de()             :
{/*@bgen(jjtree) AT_NORD_DE */
  SimpleNode jjtn000 = new SimpleNode(JJTAT_NORD_DE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AT_NORD_DE */
  try {
/*@egen*/
  "au_nord_de("term()","term()")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void sud_de()            :
{/*@bgen(jjtree) AT_SUD_DE */
  SimpleNode jjtn000 = new SimpleNode(JJTAT_SUD_DE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AT_SUD_DE */
  try {
/*@egen*/
  "au_sud_de("term()","term()")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void mm_latitude()              :
{/*@bgen(jjtree) MM_LATITUDE */
  SimpleNode jjtn000 = new SimpleNode(JJTMM_LATITUDE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MM_LATITUDE */
  try {
/*@egen*/
  "meme_latitude("term()","term()")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void mm_longitude()               :
{/*@bgen(jjtree) MM_LONGITUDE */
  SimpleNode jjtn000 = new SimpleNode(JJTMM_LONGITUDE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MM_LONGITUDE */
  try {
/*@egen*/
  "meme_longitude("term()","term()")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
/*pr\u00e9dicats de comparaison de position ternaire*/
void est_entre()            :
{/*@bgen(jjtree) EST_ENTRE */
  SimpleNode jjtn000 = new SimpleNode(JJTEST_ENTRE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EST_ENTRE */
  try {
/*@egen*/
  "est_entre("term()","term()","term()")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
/*pr\u00e9dicats de taille*/
void est_petit()            :
{/*@bgen(jjtree) EST_PETIT */
  SimpleNode jjtn000 = new SimpleNode(JJTEST_PETIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EST_PETIT */
  try {
/*@egen*/
  "est_petit("term()")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void est_grand()           :
{/*@bgen(jjtree) EST_GRAND */
  SimpleNode jjtn000 = new SimpleNode(JJTEST_GRAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EST_GRAND */
  try {
/*@egen*/
  "est_grand("term()")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void est_moyen()           :
{/*@bgen(jjtree) EST_MOYEN */
  SimpleNode jjtn000 = new SimpleNode(JJTEST_MOYEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EST_MOYEN */
  try {
/*@egen*/
  "est_moyen("term()")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
/*pr\u00e9dicats de comparaison de taille */
void plus_petit()                 :
{/*@bgen(jjtree) PLUS_PETIT_QUE */
  SimpleNode jjtn000 = new SimpleNode(JJTPLUS_PETIT_QUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PLUS_PETIT_QUE */
  try {
/*@egen*/
  "plus_petit_que("term()","term()")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void plus_grand()                 :
{/*@bgen(jjtree) PLUS_GRAND_QUE */
  SimpleNode jjtn000 = new SimpleNode(JJTPLUS_GRAND_QUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PLUS_GRAND_QUE */
  try {
/*@egen*/
  "plus_grand_que("term()","term()")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void mm_taille()            :
{/*@bgen(jjtree) MM_TAILLE */
  SimpleNode jjtn000 = new SimpleNode(JJTMM_TAILLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MM_TAILLE */
  try {
/*@egen*/
  "meme_taille_que("term()","term()")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
/*pr\u00e9dicats d'\u00e9galit\u00e9*/
void est_egal()           :
{/*@bgen(jjtree) EST_EGAL */
  SimpleNode jjtn000 = new SimpleNode(JJTEST_EGAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EST_EGAL */
  try {
/*@egen*/

  (term())"="(term())/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/*predicat*/


void predicat()     :
{}
{
  est_rose()
| est_rouge()
| est_blanche()
| mm_col()
| paquerette()
| tulipe()
| rose()
| at_est()
| at_ouest()
| at_nord()
| at_sud()
| est_de()
| ouest_de()
| nord_de()
| sud_de()
| mm_latitude()
| mm_longitude()
| est_entre()
| est_grand()
| est_petit()
| est_moyen()
| plus_petit()
| plus_grand()
| mm_taille()
| est_egal()
}




/**********************Regle 1*************************/

void formule()       :
{/*@bgen(jjtree) UNARY */
  SimpleNode jjtn000 = new SimpleNode(JJTUNARY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) UNARY */
try {
/*@egen*/
(
   Unary()
  [
   operateur()
   Unary()
  ]

)/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void Unary()      :
{/*@bgen(jjtree) UNARY */
  SimpleNode jjtn000 = new SimpleNode(JJTUNARY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) UNARY */
 try {
/*@egen*/
 (not())*
 (predicat()
 |quantificateur()
 				(predicat()
 				|"("formule()")")
 |"("formule()")")/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}





/* OPERATORS */

/**/
void or()     :
{/*@bgen(jjtree) OR */
  SimpleNode jjtn000 = new SimpleNode(JJTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OR */
 try {
/*@egen*/"V"/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/}
void and()      :
{/*@bgen(jjtree) AND */
  SimpleNode jjtn000 = new SimpleNode(JJTAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AND */
  try {
/*@egen*/ "^"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
void not()      :
{/*@bgen(jjtree) NOT */
  SimpleNode jjtn000 = new SimpleNode(JJTNOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NOT */
 try {
/*@egen*/"!"/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/}

void implies()          :
{/*@bgen(jjtree) IMPLIES */
  SimpleNode jjtn000 = new SimpleNode(JJTIMPLIES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IMPLIES */
  try {
/*@egen*/ "=>"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

void bimplies()           :
{/*@bgen(jjtree) BIMPLIES */
  SimpleNode jjtn000 = new SimpleNode(JJTBIMPLIES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BIMPLIES */
 try {
/*@egen*/"<=>"/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/}


void operateur()     :
{}
{
 and()
| not()
| implies()
| bimplies()
|or()
}


void quantificateur()     :
{}
{
	forall()[quantificateur()]
|  exists() [quantificateur()]
}

void forall()        :
{/*@bgen(jjtree) FORALL */
  SimpleNode jjtn000 = new SimpleNode(JJTFORALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FORALL */
  try {
/*@egen*/
  "U"variable()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void exists()        :
{/*@bgen(jjtree) EXISTS */
  SimpleNode jjtn000 = new SimpleNode(JJTEXISTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EXISTS */
  try {
/*@egen*/
  "E"variable()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
// ajouter 28 mars 2016
void use_op()           :
{/*@bgen(jjtree) OPERATEUR */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERATEUR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OPERATEUR */
  try {
/*@egen*/
  Unary()operateur()Unary()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//


/******** regle 2*********/


void formule_()      :
{/*@bgen(jjtree) UNARY */
  SimpleNode jjtn000 = new SimpleNode(JJTUNARY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) UNARY */
  try {
/*@egen*/
  quantificateur()("("formule_()")")
|	Unary_()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Unary_()      :
{/*@bgen(jjtree) UNARY */
  SimpleNode jjtn000 = new SimpleNode(JJTUNARY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) UNARY */
  try {
/*@egen*/
  predicat_()(operateur()predicat_())+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void predicat_()     :
{}
{
  (not())*predicat()
}

